

python -m venv env

.\env\scripts\activate

Python -m pip install --upgrade pip -i https://pypi.douban.com/simple

pip install -r requirements.txt -i https://pypi.douban.com/simple

django-admin startproject mssql_Project . 

python manage.py startapp APP_MobileNum

 

 

[settings]

中注册 - 在 installed_app=[ 下增加

'APP_MobileNum.apps.AppMobilenumConfig', 可以在APP_MobileNum文件夹下apps.py中找到相关类的名称

 

[urls]

from APP_MobileNum import views 

 

path('num/list/', views.num_list),   

    #path('num/add/', views.num_add),

    #path('num/<int:nid>/edit/', views.num_edit), 

    #path('num/<int:nid>/del/', views.num_del), 

 

 

 

[models]

from django.db import models                                                                                                         

                                                                                                                                    

class Department(models.Model):                                                                                                      

   '''部门表'''                                                                                                                        

   deparment=models.CharField(verbose_name="部门名称",max_length=32)                                                                  

   dep_number=models.IntegerField(verbose_name="部门号")                                                                             

   def __str__(self):                                                                                                               

       return self.deparment                                                                                                        

   # pwd=models.CharField(max_length=64)                                                                                            

   # age=models.IntegerField(null=True,blank=True)  #允许为空, 允许不填                                                                     

   # del_flag=models.BooleanField(verbose_name="删除标记",default=0,null=True,blank=True)  # 默认值为0, #允许为空, 允许不填                              

                                                                                                                                    

                                                                                                                                                                                                                                                       

class User(models.Model):                                                                                                        

   '''员工表'''                                                                                                                        

   def __str__(self):                                                                                                               

       return self.username                                                                                                                                  

   username=models.CharField(verbose_name="姓名",max_length=32)                                                                     

   password=models.CharField(verbose_name="标题",max_length=64)                                                                     

   sso=models.IntegerField(verbose_name="性别")

#    gender_choices=((1,"男"),(0,"女"))                                                                                             

#    gender=models.SmallIntegerField(verbose_name="性别",choices=gender_choices)   # 这类gender_choices必须使用小整形                                                     

#    account=models.DecimalField(verbose_name="账户余额",max_digits=19,decimal_places=4,default=0,null=True,blank=True)                 

   manager=models.CharField(verbose_name="people leader",max_length=32)                                                           

   create_time=models.DateTimeField(verbose_name="入职时间")                                                                          

   edit_time=models.DateTimeField(verbose_name="修改时间",null=True,blank=True)                                                       

   department=models.ForeignKey(to="Department", to_field="id",on_delete=models.SET_NULL,null=True,verbose_name="部门ID")

   # department_ID=models.BigIntegerField(verbose_name="部门ID")                                                               

   permission=models.CharField(verbose_name="权限",max_length=32,null=True,blank=True)                                              

   del_flag=models.BooleanField(verbose_name="删除标记",default=0,null=True,blank=True)  # 默认值为0, #允许为空, 允许不填                         

 

class MobileNum(models.Model):                                                                                                        

   '''手机号码表'''                                                                                                                        

   def __str__(self):                                                                                                               

       return self.mobile                                                                                                                                  

   mobile=models.CharField(verbose_name="手机号",max_length=11)                                                                     

   price=models.DecimalField(verbose_name="单价",max_digits=19,decimal_places=0,default=50)                                                                   

   level_choices=((3,"AAAA"),(2,"AAA"),(1,"AABB"),(0,"普通级"))                                                                                             

   level=models.SmallIntegerField(verbose_name="级别",choices=level_choices,default=0)                                                      

   status_choices=((2,"已占用"),(1,"未占用"))                                                                                             

   status=models.SmallIntegerField(verbose_name="状态",choices=status_choices,default=1)                                                

   del_flag=models.BooleanField(verbose_name="删除标记",default=0,null=True,blank=True)  # 默认值为0, #允许为空, 允许不填                         

 

 

 

 

[views]

from django.shortcuts import render,HttpResponse,redirect                                                                                                    

from . import models                                                                                                                            

from django import forms

from django.core.validators import RegexValidator  

from django.core.exceptions import ValidationError

from django.utils.safestring import mark_safe

from .utils.pageination import Pageination

 

# def index(request):                                                                                                                                          

#    return render(request,'index.html')                                                                                                                      

# def test(request):                                                                                                                                           

#    return render(request,'test.html')                                                                                                                       

                                                                                                                                                                                                                                                                                                                      

                                                                                                                                                            

# 下面是推荐的用法,                                                                                                                                                        

class MobileNumADDModelForm(forms.ModelForm):                                                                                                                    

   mobile=forms.CharField(

       min_length=11,max_length=11,label="手机号",

       validators=[RegexValidator(r'^[0-9]+$', '请输入数字'), RegexValidator(r'^1[3-9]\d{9}$', '数字必须以1开头,第二位位3-9,并且为11位数字')]

       )   # 校验                                                                                                                                                                                                   

                                                                                                                                                            

   class Meta:                                                                                                                                              

       model=models.MobileNum                                                                                                                                

       exclude=['del_flag']  #排查某项,其他都显示

    #    fields="__all__"   #所有的项

    #    fields=["mobile","price","level","status"]  #自定义的项                       

                                                                                                                                                            

   def __init__(self,*args, **kwargs):                                                                                                                      

       super().__init__(*args, **kwargs)                                                                                                                    

       #循环所有插件, 并增加响应的类                                                                                                                                     

       for name, field in self.fields.items():                                                                                                              

           field.widget.attrs={"class":"form-control","placeholder":field.label} 

    

   def clean_mobile(self):   # 以后可以验证数据是否已经存在

        txt_mobile=self.cleaned_data["mobile"]

        exists=models.MobileNum.objects.filter(mobile=txt_mobile).exists()

        if exists:

            raise ValidationError("手机号已存在")

        return txt_mobile

 

def num_list(request):  

    # for i in range (300):

    #     models.MobileNum.objects.create(mobile="13302186839",price=500,level=2,status=1)

    

    # 0.根据搜索条件得到data_list   

    data_dict={}

    search_data=request.GET.get("query","") # 查链接 ?query=xxx中的q的值拿到

    # 1.筛选包含关键字的数据, 并生成对应的data_list

    if search_data: 

        data_dict["mobile__contains"]=search_data;    

    data_list=models.MobileNum.objects.filter(del_flag=0,**data_dict).order_by("-level")    

    # 2. 实例化类, 并传入对应的request 和 data_list   

    page_obj=Pageination(request,data_list)

    

    # 3. 从实例化的类中, 拿到page化的data_list

    data_list=page_obj.data_list_pages     

    total_pages=page_obj.total_pages

    page_str=page_obj.html_page       

                                                                         

    return render(request,'num_list.html',{"data_list":data_list,"search_data":search_data,"page_str":page_str,"total_pages":total_pages})

                                                                                                                                                            

def num_add(request):                                                                                                                                       

   if request.method== "GET":                                                                                                                             

       form=MobileNumADDModelForm() # 根据属性生成对应的输入框                                                                                                              

       return render(request,'num_add.html',{"form":form})                                                                                               

   form=MobileNumADDModelForm(data=request.POST)                                                                                                                

   if form.is_valid():                                                                                                                                      

       # 如果有没有让用户输入的字段, 可以使用form.instance.字段名=值 来补充                                                                                                                         

       form.save()                                                                                                                                          

       return redirect('/num/list/')  # 这里()中的内容需要以/开头/结尾                                                                                                  

                                                                                                                                                            

   return render(request,'num_add.html',{"form":form})                                                                                                   

 

 

class MobileNumEditModelForm(forms.ModelForm):                                                                                                                    

#    mobile=forms.CharField(disabled=True,label="手机号")   # 显示但是不能编辑                                                                                                                                                                                                  

                                                                                                                                                            

   class Meta:                                                                                                                                              

       model=models.MobileNum                                                                                                                                

       exclude=['del_flag']  #排查某项,其他都显示

    #    fields="__all__"   #所有的项

    #    fields=["mobile","price","level","status"]  #自定义的项                       

                                                                                                                                                            

   def __init__(self,*args, **kwargs):                                                                                                                      

       super().__init__(*args, **kwargs)                                                                                                                    

       #循环所有插件, 并增加响应的类                                                                                                                                     

       for name, field in self.fields.items():                                                                                                              

           field.widget.attrs={"class":"form-control","placeholder":field.label}

 

   def clean_mobile(self):   # 在修改界面验证修改后的数据是否已经存在

       #当前编辑行的ID(.pk)

       nid=self.instance.pk

       txt_mobile=self.cleaned_data["mobile"]

       # 把自己排除后,查修改后的内容是否存在

       exists=models.MobileNum.objects.exclude(id=nid).filter(mobile=txt_mobile).exists()

       if exists:

           raise ValidationError("手机号已存在")

       return txt_mobile                                                                                                                                                    

                                                                                                                                                            

def num_edit(request,nid):                                                                                                                                  

   row_data=models.MobileNum.objects.filter(id=nid).first()   # 获取ID值对应的行的数据                                                                                 

   if request.method== "GET":                                                                                                                             

       form=MobileNumEditModelForm(instance=row_data) # 根据属性生成对应的输入框, 并把ID值对应的列的值传入                                                                              

       return render(request,'num_edit.html',{"form":form})                                                                                              

                                                                                                                                                            

   form=MobileNumEditModelForm(data=request.POST,instance=row_data) #指定更新这一行的数据                                                                                  

   if form.is_valid():                                                                                                                                      

       # 如果有没有让用户输入的字段, 可以使用form.instance.字段名=值 来补充                                                                                                                        

       form.save()                                                                                                                                          

       return redirect('/num/list/')  # 这里()中的内容需要以/开头/结尾                                                                                                  

                                                                                                                                                            

   return render(request,'num_edit.html',{"form":form})                                                                                                  

                                                                                                                                                            

def num_del(request,nid):  #删除功能 -   # href="/dept/{{item.id}}/del/" 来实现                                                                                 

   models.MobileNum.objects.filter(id=nid).update(del_flag=1)                                                                                                

   return redirect("/num/list/")                                                                                                                         

                                                                                                                                                            

  

                                                                                                         

                                                                                                                                                            

  

                                                                                                                                                      

  

                                                                                                                                                        

                                                                                                                                                            

      

 

[settings]

#------------------MS SQL  Server  DB ----------------------------------------- 

#--------先更改DB信息, 之后在拷走  

DATABASES = {                                                                      

   'default': {                                                                   

       'ENGINE': 'mssql',                                                         

       'NAME': 'CNIT',                                                            

       'USER': 'sa',                                                            

       'PASSWORD': 'LM-china1',                                                     

       'HOST': 'G8GDD8H2E\SQLEXPRESS',                                     

       'PORT': '',                                                                

                                                                                  

       'OPTIONS': {                                                               

           'driver': 'ODBC Driver 17 for SQL Server',                             

           'collation': 'Chinese_PRC_CI_AS',                                      

       },                                                                         

   },                                                                             

}                                                                                  

                                                                                  

# set this to False if you want to turn off pyodbc's connection pooling            

DATABASE_CONNECTION_POOLING = False                                                   

 

#------------------MS SQL  Server  DB -----------------------------------------  

 

#------------------本地时区和中文设置 -----------------------------------------  

# LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'

# USE_TZ = True

 

LANGUAGE_CODE = 'zh-hans'

 

TIME_ZONE = 'Asia/Shanghai'

 

USE_TZ = False

 

 

USE_I18N = True

 

USE_L10N = True

 

#------------------本地时区和中文设置  -----------------------------------------  

 

 

 

 

 

[admin] 

from django.contrib import admin                                                                                                                                

from APP_MobileNum import models                                                                                                        

                                                                                                                                                               

class DepartmentAdmin(admin.ModelAdmin):                                                                                                                        

   list_display=("deparment","dep_number")                                                                                                                 

                                                                                                                                                                                                                                                                                                                           

class UserAdmin(admin.ModelAdmin):                                                                                                                          

   list_display=("username","password","sso","manager","create_time","edit_time","department_id","permission","del_flag")      

                                                                                                                                                               

                                                                                                                                                               

admin.site.register(models.Department,DepartmentAdmin)                                                                                                                                                                                                                                      

admin.site.register(models.User,UserAdmin)         

 

           

# --------------------------------------------------

  运行终端时, 确定运行的是自己文件夹得终端

  .\env\scripts\activate

  python manage.py makemigrations  #ORM初始化

  python manage.py migrate  #创建数据表

  python manage.py createsuperuser    # admin lm-china1  在/admin 中使用

  python manage.py runserver  

 

 
